load("C:/Users/Archita Dev Barman/Downloads/functions_archita.RData")
load("C:/Users/Archita Dev Barman/Downloads/functions_archita (1).RData")
knitr::opts_chunk$set(echo = TRUE)
#load the necessary packages. If not available, then use install.packages() function
install.packages("fitdistrplus")
View(data1)
library(fitdistrplus)
install.packages("MASS")
install.packages("MASS")
library(MASS)
install.packages("actuar")
library(actuar)
install.packages("sfsmisc")
library(sfsmisc)
View(AIC_df)
View(data1)
data1 <- read.delim("C:/Users/Archita Dev Barman/OneDrive/Desktop/Mouse_aging_dataset/GSE121589_bulkRNAseq.TPM.csv")
data1 <- data1[, c(1,2,
15,16,23,24,31,32,38,39,45,46,5,6,
8,9,21,22,27,28,36,37,41,42,3,4)]
rownames(data1) <- data1$GeneID
data1 <- data1[-c(1,2)]
data1 <- data1[-1,]
data1 <- data1[rowSums(data1)>0,]
data1 <- data1[-c(1,2)]
data1 <- data1[-1,]
data1 <- data1[rowSums(data1)>0,]
data1 <- read.delim("C:/Users/Archita Dev Barman/OneDrive/Desktop/Mouse_aging_dataset/GSE121589_bulkRNAseq.TPM.csv")
data1 <- data1[, c(1,2,
15,16,23,24,31,32,38,39,45,46,5,6,
8,9,21,22,27,28,36,37,41,42,3,4)]
rownames(data1) <- data1$GeneID
data1 <- data1[-c(1,2)]
data1 <- data1[-1,]
data1 <- data1[rowSums(data1)>0,]
write.csv(data1, "Murinedataset1.csv")
load("C:/Users/Archita Dev Barman/Downloads/functions_archita (1).RData")
View(data2)
View(data1)
knitr::opts_chunk$set(echo = TRUE)
install.packages("MASS")
library(MASS)
install.packages("actuar")
library(actuar)
#load the necessary packages. If not available, then use install.packages() function
install.packages("fitdistrplus")
library(fitdistrplus)
install.packages("sfsmisc")
library(sfsmisc)
##if your dataframe does not have a separate column for genes, make sure you create one.
data1$gene_id <- rownames(data1)
data1 <- data1[,c(25,1:24)]
#change this to the sample names of your dataframe
col_slt <- colnames(data1[,c(2:25)])
#use this line if you have replicates:
replicates <- rep(c("R1","R2"), 12)
rownames(tpm.df) <- tpm.df$gene_id
tpm.df <- tpm.df[-1]
dist.names <- c( "Burr")
tpm.df2 <- tpm.df[1:12]
cutoff_val <- 2
png(paste0("FS1a_cdfcomp4.png"), unit="cm", height=10, width=12, res=500) #you can modify the unit, height, width and resolution as you see fit
par(mfrow=c(3,4), mgp=c(5,0.4,0), oma = c (1, 2, 1, 0.5), cex=0.35) # you can modify mfrow to however many plots you need
# only get the first replicate to plot
for(i in c(1:12)){
# only get the first replicate to plot
samplei.i.list <- sample.list[[i]]
if( i %in% c(1) ) {addlegend=T} else{addlegend=F}
if(i %in% c(1,2)) {left_mar=2} else {left_mar=0}       # space for y ticks
if(i %in% c(2,4)) {bottom_mar=2} else {bottom_mar=0} # space for x ticks
par(mar=c(2, 2, 2, 0))
cdfcomp(samplei.i.list,xlogscale=TRUE,ylogscale=TRUE,do.points=F,fitcol=colors, #lwd=1,
ylim=c(10^-3,1),xlim=c(10^-2,10^5), addlegend = F, # addlegend
ann=F) #main=cell_types[j]
title(colnames(tpm.df2)[i], line = 0.2)
abline(v= cutoff_val, lty=2)
if(i==1) legend("bottomright",bty="n" ,col=colors,legend=dist.names,lty=seq(length(dist.names)))
# legend(x=10^0.2, y = 10^-0.7, bty="n",legend=cell_types[i])
}
mtext("Cumulative Distribution Function", side = 2, outer = T, cex=0.5)
mtext("TPM", side = 1, outer = T, cex=0.5)
dev.off()
dist.names <- c( "Burr")
tpm.df2 <- tpm.df[13:24]
View(tpm.df)
View(tpm.df2)
dist.names <- c( "Burr")
tpm.df2 <- tpm.df[13:24]
dist.names <- c( "Burr")
tpm.df2 <- tpm.df[1:12]
cutoff_val <- 2
View(tpm.df2)
dist.names <- c( "Burr")
tpm.df3 <- tpm.df[12:24]
tpm.df3 <- tpm.df[12:25]
dim.data.frame(tpm.df)
#filter dataframe using df_filt function; change thres according to the threshold from distribution fitting. And change ncols according to filtering condition.
df_filt <- function(df,thres=2,ncols=1){
# at least ncols columns with minimum thres value
# eg. at least 2 above 5
# df must have rownames
df_binary <- df >= thres
df_binary_sum <- rowSums(df_binary)
above_thres <- df_binary_sum[df_binary_sum >= ncols]
return(df[names(above_thres), ] )
}
View(df_filt)
tpm_filt1 <- df_filt(tpm.df2, thres = 2, ncols = 1)
View(tpm_filt1)
tpm_filt1 <- df_filt(tpm.df2, thres = 2, ncols = 2)
tpm_filt1 <- df_filt(tpm.df, thres = 2, ncols = 2)
tpm_filt1 <- df_filt(tpm.df2, thres = 2, ncols = 2)
tpm_filt1 <- df_filt(tpm.df2, thres = 2, ncols = 1)
tpm_filt1 <- df_filt(tpm.df2, thres = 2, ncols = 13)
View(tpm_filt1)
tpm_filt1 <- df_filt(tpm.df2, thres = 2, ncols = 1)
View(tpm_filt1)
tpm_filt1 <- df_filt(tpm.df2, thres = 1.5, ncols = 1)
View(data1)
#filter dataframe using df_filt function; change thres according to the threshold from distribution fitting. And change ncols according to filtering condition.
df_filt <- function(df,thres=2,ncols=1){
# at least ncols columns with minimum thres value
# eg. at least 2 above 5
# df must have rownames
df_binary <- df >= thres
df_binary_sum <- rowSums(df_binary)
above_thres <- df_binary_sum[df_binary_sum >= ncols]
return(df[names(above_thres), ] )
}
df_filt <- function(df,thres=2,ncols=1){
# at least ncols columns with minimum thres value
# eg. at least 2 above 5
# df must have rownames
df_binary <- df >= thres
df_binary_sum <- rowSums(df_binary)
above_thres <- df_binary_sum[df_binary_sum >= ncols]
return(df[names(above_thres), ] )
}
tpm_filt1 <- df_filt(tpm.df2, thres = 1.5, ncols = 1)
tpm_filt1 <- df_filt(tpm.df2, thres = 1.5, ncols = 1)
tpm_filt1 <- df_filt(tpm.df2, thres = 5, ncols = 1)
tpm_filt1 <- df_filt(tpm.df2, thres = 0.9, ncols = 1)
tpm_filt1 <- df_filt(tpm.df2, thres = 0.9, ncols = 5)
tpm_filt1 <- df_filt(tpm.df2, thres = 1, ncols = 2)
tpm_filt1 <- df_filt(tpm.df2, thres = 1.5, ncols = 1)
tpm_filt1 <- df_filt(tpm.df2, thres = 1.5, ncols = 1)
tpm_filt1 <- df_filt(tpm.df2, thres = 1.5, ncols = 1:2)
tpm_filt1 <- df_filt(tpm.df2, thres = 1.5, ncols = 1)
plot(data1$d0_Y_Rep1, data1$d0_A_Rep1, xlab = "d0_Y_Rep1", ylab = "d0_A_Rep1", pch=20)
plot(tpm_filtered_log$day4_r1, tpm_filtered_log$day10_r2, xlab = "day4_r1", ylab = "day10_r2", pch=20)
tpm_filtered_log <- log10(tpm_filt + 1)
data1 <- log10(tpm_filt + 1)
plot(data1$d0_Y_Rep1, data1$d0_A_Rep1, xlab = "d0_Y_Rep1", ylab = "d0_A_Rep1", pch=20)
plot(data1$d0_Y_Rep1, data1$d0_A_Rep1, xlab = "d0_Y_Rep1", ylab = "d0_A_Rep1", pch=20)
plot(data1$d0_Y_Rep1, data1$d0_A_Rep1, xlab = "d0_Y_Rep1", ylab = "d0_A_Rep1", pch=20)
plot(tpm_filtered_log$day4_r1, tpm_filtered_log$day10_r2, xlab = "day4_r1", ylab = "day10_r2", pch=20)
log_rpm <- df_rpm
rownames(log_rpm)<- df_rpm$ensembl_id
log_rpm <- log_rpm[-1]
log_rpm <- data.frame(lapply(log_rpm,as.numeric))
log_rpm <- log10(log_rpm+1)
plot(log_rpm$day0_r1, log_rpm$day4_r1)
rownames(df_rpm) <- rownames(df_rpm$ensembl_id)
df_rpm <- df_rpm[, c(3:10)]
plot(data1$d0_Y_Rep1, data1$d0_A_Rep1, xlab = "d0_Y_Rep1", ylab = "d0_A_Rep1", pch=20)
#filter dataframe using df_filt function; change thres according to the threshold from distribution fitting. And change ncols according to filtering condition.
df_filt <- function(df,thres=2,ncols=1){
# at least ncols columns with minimum thres value
# eg. at least 2 above 5
# df must have rownames
df_binary <- df >= thres
df_binary_sum <- rowSums(df_binary)
above_thres <- df_binary_sum[df_binary_sum >= ncols]
return(df[names(above_thres), ] )
}
tpm_filt1 <- df_filt(tpm.df2, thres = 2, ncols = 1)
#save the filtered dataframe for future reference:
write.csv(tpm_filt1, "C:/Users/Archita Dev Barman/OneDrive/Desktop/Mouse_aging_dataset/data_filt.csv")
plot(data1$d0_Y_Rep1, data1$d0_A_Rep1, xlab = "d0_Y_Rep1", ylab = "d0_A_Rep1", pch=20)
df_filt(tpm.df2, thres = 1.5, ncols = 2) # The function will return rows with at least 2 columns above the threshold
View(tpm.df2)
plot(data1$d0_Y_Rep1, data1$d0_A_Rep1, xlab = "d0_Y_Rep1", ylab = "d0_A_Rep1", pch=20)
save.image("C:/Users/Archita Dev Barman/Downloads/functions_archita (1).RData")
load("C:/Users/Archita Dev Barman/Downloads/functions_archita (1).RData")
knitr::opts_chunk$set(echo = TRUE)
data1 <- read.delim("C:/Users/Archita Dev Barman/OneDrive/Desktop/Mouse_aging_dataset/GSE121589_bulkRNAseq.TPM.csv")
data1 <- data1[, c(1,2,
15,16,23,24,31,32,38,39,45,46,5,6,
8,9,21,22,27,28,36,37,41,42,3,4)]
rownames(data1) <- data1$GeneID
data1 <- data1[-c(1,2)]
data1 <- data1[-1,]
data1 <- data1[rowSums(data1)>0,]
##if your dataframe does not have a separate column for genes, make sure you create one.
data1$gene_id <- rownames(data1)
data1 <- data1[,c(25,1:24)]
#change this to the sample names of your dataframe
col_slt <- colnames(data1[,c(2:25)])
#use this line if you have replicates:
replicates <- rep(c("R1","R2"), 12)
rownames(tpm.df) <- tpm.df$gene_id
tpm.df <- tpm.df[-1]
tpm.df2 <- tpm.df[1:12]
cutoff_val <- 2
png(paste0("FS1a_cdfcomp4.png"), unit="cm", height=10, width=12, res=500) #you can modify the unit, height, width and resolution as you see fit
par(mfrow=c(3,4), mgp=c(5,0.4,0), oma = c (1, 2, 1, 0.5), cex=0.35) # you can modify mfrow to however many plots you need
# only get the first replicate to plot
for(i in c(1:12)){
# only get the first replicate to plot
samplei.i.list <- sample.list[[i]]
if( i %in% c(1) ) {addlegend=T} else{addlegend=F}
if(i %in% c(1,2)) {left_mar=2} else {left_mar=0}       # space for y ticks
if(i %in% c(2,4)) {bottom_mar=2} else {bottom_mar=0} # space for x ticks
par(mar=c(2, 2, 2, 0))
cdfcomp(samplei.i.list,xlogscale=TRUE,ylogscale=TRUE,do.points=F,fitcol=colors, #lwd=1,
ylim=c(10^-3,1),xlim=c(10^-2,10^5), addlegend = F, # addlegend
ann=F) #main=cell_types[j]
title(colnames(tpm.df2)[i], line = 0.2)
abline(v= cutoff_val, lty=2)
if(i==1) legend("bottomright",bty="n" ,col=colors,legend=dist.names,lty=seq(length(dist.names)))
# legend(x=10^0.2, y = 10^-0.7, bty="n",legend=cell_types[i])
}
install.packages("MASS")
library(MASS)
install.packages("actuar")
library(actuar)
install.packages("sfsmisc")
library(sfsmisc)
#load the necessary packages. If not available, then use install.packages() function
install.packages("fitdistrplus")
library(fitdistrplus)
png(paste0("FS1a_cdfcomp4.png"), unit="cm", height=10, width=12, res=500) #you can modify the unit, height, width and resolution as you see fit
par(mfrow=c(3,4), mgp=c(5,0.4,0), oma = c (1, 2, 1, 0.5), cex=0.35) # you can modify mfrow to however many plots you need
# only get the first replicate to plot
for(i in c(1:12)){
# only get the first replicate to plot
samplei.i.list <- sample.list[[i]]
if( i %in% c(1) ) {addlegend=T} else{addlegend=F}
if(i %in% c(1,2)) {left_mar=2} else {left_mar=0}       # space for y ticks
if(i %in% c(2,4)) {bottom_mar=2} else {bottom_mar=0} # space for x ticks
par(mar=c(2, 2, 2, 0))
cdfcomp(samplei.i.list,xlogscale=TRUE,ylogscale=TRUE,do.points=F,fitcol=colors, #lwd=1,
ylim=c(10^-3,1),xlim=c(10^-2,10^5), addlegend = F, # addlegend
ann=F) #main=cell_types[j]
title(colnames(tpm.df2)[i], line = 0.2)
abline(v= cutoff_val, lty=2)
if(i==1) legend("bottomright",bty="n" ,col=colors,legend=dist.names,lty=seq(length(dist.names)))
# legend(x=10^0.2, y = 10^-0.7, bty="n",legend=cell_types[i])
}
mtext("Cumulative Distribution Function", side = 2, outer = T, cex=0.5)
mtext("TPM", side = 1, outer = T, cex=0.5)
dev.off()
plot(data1$d0_Y_Rep1, data1$d0_A_Rep1, xlab = "d0_Y_Rep1", ylab = "d0_A_Rep1", pch=20)
plot(data1$d0_Y_Rep2, data1$d0_A_Rep2, xlab = "d0_Y_Rep2", ylab = "d0_A_Rep2", pch=20)
plot(data1$d1_Y_Rep1, data1$d1_A_Rep1, xlab = "d1_Y_Rep1", ylab = "d1_A_Rep1", pch=20)
plot(data1$d1_Y_Rep2, data1$d1_A_Rep2, xlab = "d1_Y_Rep2", ylab = "d1_A_Rep2", pch=20)
plot(data1$d3_Y_Rep1, data1$d3_A_Rep1, xlab = "d3_Y_Rep1", ylab = "d3_A_Rep1", pch=20)
plot(data1$d3_Y_Rep2, data1$d3_A_Rep2, xlab = "d3_Y_Rep2", ylab = "d3_A_Rep2", pch=20)
plot(data1$d7_Y_Rep1, data1$d7_A_Rep1, xlab = "d7_Y_Rep1", ylab = "d7_A_Rep1", pch=20)
plot(data1$d7_Y_Rep2, data1$d7_A_Rep2, xlab = "d7_Y_Rep2", ylab = "d7_A_Rep2", pch=20)
plot(data1$d21_Y_Rep1, data1$d21_A_Rep1, xlab = "d21_Y_Rep1", ylab = "d21_A_Rep1", pch=20)
plot(data1$d21_Y_Rep2, data1$d21_A_Rep2, xlab = "d21_Y_Rep2", ylab = "d21_A_Rep2", pch=20)
plot(data1$d5_Y_Rep1, data1$d5_A_Rep1, xlab = "d5_Y_Rep1", ylab = "d5_A_Rep1", pch=20)
plot(data1$d5_Y_Rep2, data1$d5_A_Rep2, xlab = "d5_Y_Rep2", ylab = "d5_A_Rep2", pch=20)
load("C:/Users/Archita Dev Barman/Downloads/functions_archita (1).RData")
load("C:/Users/Archita Dev Barman/Downloads/functions_archita (1).RData")
knitr::opts_chunk$set(echo = TRUE)
data1 <- read.delim("C:/Users/Archita Dev Barman/OneDrive/Desktop/Mouse_aging_dataset/GSE121589_bulkRNAseq.TPM.csv")
data1 <- data1[-c(1,2)]
data1 <- data1[-1,]
data1 <- data1[rowSums(data1)>0,]
data1 <- read.delim("C:/Users/Archita Dev Barman/OneDrive/Desktop/Mouse_aging_dataset/GSE121589_bulkRNAseq.TPM.csv")
rownames(data1) <- data1$GeneID
data1 <- data1[-1,]
data1 <- data1[rowSums(data1)>0,]
load("C:/Users/Archita Dev Barman/Downloads/functions_archita (1).RData")
knitr::opts_chunk$set(echo = TRUE)
data1 <- read.delim("C:/Users/Archita Dev Barman/OneDrive/Desktop/Mouse_aging_dataset/GSE121589_bulkRNAseq.TPM.csv")
dim(data1)
rowSums(data1)
rowMeans(data1)
rownames(data1) <- data1$GeneID
data1 <- data1[-c(1,2)]
data1 <- data1[-1,]
data1 <- data1[rowSums(data1)>0,]
